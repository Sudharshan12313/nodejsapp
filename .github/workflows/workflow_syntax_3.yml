name: Comprehensive Jobs Example Workflow

on:
  #push:
  #  branches:
  #    - main
 workflow_dispatch:
jobs:
  build:
    name: Build Job
    runs-on: ubuntu-latest
    permissions:
      contents: read
    environment: build-env
    concurrency:
      group: build-group
      cancel-in-progress: true
    #defaults:
    #  run:
    #    shell: bash
    #    working-directory: src
    #timeout-minutes: 30
    steps:
      - id: checkout
        name: Checkout Repository
        uses: actions/checkout@v3

      - id: setup-node
        name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - id: run-tests
        name: Run Tests
        run: npm run build
        env:
          TEST_ENV: "test_value"

  deploy:
    name: Deploy Job
    needs: build
    runs-on: ubuntu-latest
    if: ${{ success() }}
    environment: production
    concurrency:
      group: deploy-group
      cancel-in-progress: false
    outputs:
      deploy-status: ${{ steps.deploy.outputs.status }}
    timeout-minutes: 15
    steps:
      - id: deploy
        name: Deploy Application
        run: |
          echo "Deploying to production..."
          echo "DEPLOY_STATUS=success" >> $GITHUB_ENV
        env:
          API_TOKEN: ${{ secrets.API_TOKEN }}
          DEPLOY_ENV: "production"

      - id: notify
        name: Notify Deployment
        run: echo "Deployment successful for production."
        if: ${{ steps.deploy.outputs.status == 'success' }}

  test-matrix:
    name: Test Matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: [14, 16]
      fail-fast: false
      max-parallel: 2
    continue-on-error: false
    steps:
      - id: matrix-info
        name: Matrix Information
        run: |
          echo "OS: ${{ matrix.os }}"
          echo "Node.js Version: ${{ matrix.node }}"

      - name: Run Tests
        run: |
          echo "Running tests for OS: ${{ matrix.os }} on Node.js: ${{ matrix.node }}"
          
 # docker-login:
 #   runs-on: ubuntu-latest

 #   steps:
 #     - name: Checkout Code
 #       uses: actions/checkout@v3

 #     - name: Log in to Docker Hub
 #       run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin        

 # container-job:
 #   name: Containerized Job
 #   runs-on: ubuntu-latest
 #   container:
 #     image: node:16
 #     credentials:
 #       username: ${{ secrets.DOCKER_USERNAME }}
 #       password: ${{ secrets.DOCKER_PASSWORD }}
 #     env:
 #       NODE_ENV: "production"
 #     ports:
 #       - 8080:80
 #     volumes:
 #      - /cache:/tmp/cache
 #     options: --entrypoint "/bin/bash"
 #   steps:
 #     - name: Run inside container
 #       run: |
 #         echo "Container-based job running Node.js application"
 #       shell: sh

  service-job:
    name: PostgreSQL Service Job
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: example
        ports:
          - 5432:5432
    steps:
      - name: Start PostgreSQL Service
        run: echo "PostgreSQL service is running!"
